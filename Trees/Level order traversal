 Level Order
 
Problem Description
Given a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

Problem Constraints
1 <= number of nodes <= 105

Input Format
First and only argument is root node of the binary tree, A.

Output Format
Return a 2D integer array denoting the level order traversal of the given binary tree.

Example Input
Input 1:

    3
   / \
  9  20
    /  \
   15   7
Input 2:

   1
  / \
 6   2
    /
   3
   
Example Output
Output 1:

 [
   [3],
   [9, 20],
   [15, 7]
 ]
Output 2:

 [ 
   [1]
   [6, 2]
   [3]
 ]
 
 ************************************************************************************************************************************************************
 /**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> solve(TreeNode A) {
        /**********declare a queue for storing the currnode and its child***************/
        Deque<TreeNode> queue = new ArrayDeque<>();
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        queue.addLast(A);
        while(!queue.isEmpty()){
            int n = queue.size();
            ArrayList<Integer> currentLevel = new ArrayList<>();
            /*************** iterative approach - which iterates through out current queue for each iteration ********************/
            for(int i=0;i<n;i++){
                TreeNode curr = queue.pollFirst();
                if(curr.left!=null) queue.addLast(curr.left);
                if(curr.right!=null) queue.addLast(curr.right);
                currentLevel.add(curr.val);
            }
            /***************adding to inner list ***************/
            result.add(currentLevel);
        
        }
        /***************adding to inner list ***************/
        return result;
    }
}
